import React, { useState } from 'react';
import { ProblemSettings } from '../types';

interface StudentSetupProps {
  onStart: (settings: ProblemSettings) => void;
  initialSettings?: ProblemSettings;
}

export const StudentSetup: React.FC<StudentSetupProps> = ({ onStart, initialSettings }) => {
  const [studentName, setStudentName] = useState(initialSettings?.studentName || '');
  const [questionQuantity, setQuestionQuantity] = useState(initialSettings?.questionQuantity || 25);
  const [enabledTypes, setEnabledTypes] = useState<Array<string>>(
    initialSettings?.enabledTypes || ['addition', 'subtraction', 'multiplication_table', 'division_table']
  );
  const [difficulty, setDifficulty] = useState(initialSettings?.difficulty || 'medium');

  const problemTypes = [
    { id: 'addition', label: 'Ph√©p c·ªông', description: 'C·ªông trong ph·∫°m vi 1000' },
    { id: 'subtraction', label: 'Ph√©p tr·ª´', description: 'Tr·ª´ trong ph·∫°m vi 1000' },
    { id: 'multiplication_table', label: 'B·∫£ng nh√¢n', description: 'Nh√¢n t·ª´ 1 ƒë·∫øn 9' },
    { id: 'division_table', label: 'B·∫£ng chia', description: 'Chia t·ª´ 1 ƒë·∫øn 9' },
    { id: 'multiplication', label: 'Ph√©p nh√¢n', description: 'Nh√¢n trong ph·∫°m vi 100' },
    { id: 'division', label: 'Ph√©p chia', description: 'Chia trong ph·∫°m vi 100' },
    { id: 'two_digit_multiply', label: 'Nh√¢n 2 ch·ªØ s·ªë', description: 'Nh√¢n s·ªë c√≥ hai ch·ªØ s·ªë v·ªõi s·ªë c√≥ m·ªôt ch·ªØ s·ªë' },
    { id: 'division_with_remainder', label: 'Chia c√≥ d∆∞', description: 'Ph√©p chia h·∫øt, ph√©p chia c√≥ d∆∞' },
    { id: 'two_digit_divide', label: 'Chia 2 ch·ªØ s·ªë', description: 'Chia s·ªë c√≥ hai ch·ªØ s·ªë cho s·ªë c√≥ m·ªôt ch·ªØ s·ªë' },
    { id: 'three_digit_multiply', label: 'Nh√¢n 3 ch·ªØ s·ªë', description: 'Nh√¢n s·ªë c√≥ ba ch·ªØ s·ªë v·ªõi s·ªë c√≥ m·ªôt ch·ªØ s·ªë' },
    { id: 'three_digit_divide', label: 'Chia 3 ch·ªØ s·ªë', description: 'Chia s·ªë c√≥ ba ch·ªØ s·ªë cho s·ªë c√≥ m·ªôt ch·ªØ s·ªë' }
  ];

  const handleTypeToggle = (typeId: string) => {
    setEnabledTypes(prev => 
      prev.includes(typeId) 
        ? prev.filter(t => t !== typeId)
        : [...prev, typeId]
    );
  };

  const handleStart = () => {
    if (!studentName.trim()) {
      alert('Vui l√≤ng nh·∫≠p t√™n h·ªçc sinh!');
      return;
    }
    
    if (enabledTypes.length === 0) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i b√†i t·∫≠p!');
      return;
    }

    onStart({
      studentName: studentName.trim(),
      questionQuantity,
      enabledTypes: enabledTypes as any,
      difficulty: difficulty as any
    });
  };

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-2xl shadow-lg p-8">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">üßÆ Em H·ªçc To√°n - L·ªõp 3</h1>
        <p className="text-gray-600">Thi·∫øt l·∫≠p b√†i ki·ªÉm tra</p>
      </div>

      <div className="space-y-6">
        {/* Student Name */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            T√™n h·ªçc sinh *
          </label>
          <input
            type="text"
            value={studentName}
            onChange={(e) => setStudentName(e.target.value)}
            placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n..."
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        {/* Question Quantity */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            S·ªë c√¢u h·ªèi
          </label>
          <select
            value={questionQuantity}
            onChange={(e) => setQuestionQuantity(Number(e.target.value))}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value={10}>10 c√¢u</option>
            <option value={15}>15 c√¢u</option>
            <option value={20}>20 c√¢u</option>
            <option value={25}>25 c√¢u</option>
            <option value={30}>30 c√¢u</option>
            <option value={50}>50 c√¢u</option>
          </select>
        </div>

        {/* Problem Types */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            Lo·∫°i b√†i t·∫≠p *
          </label>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {problemTypes.map((type) => (
              <label key={type.id} className="flex items-center p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                <input
                  type="checkbox"
                  checked={enabledTypes.includes(type.id)}
                  onChange={() => handleTypeToggle(type.id)}
                  className="mr-3 h-4 w-4 text-blue-600"
                />
                <div>
                  <div className="font-medium text-gray-800">{type.label}</div>
                  <div className="text-sm text-gray-500">{type.description}</div>
                </div>
              </label>
            ))}
          </div>
        </div>

        {/* Difficulty */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            ƒê·ªô kh√≥
          </label>
          <div className="space-y-2">
            {[
              { value: 'easy', label: 'D·ªÖ', description: 'S·ªë nh·ªè, ph√©p t√≠nh ƒë∆°n gi·∫£n' },
              { value: 'medium', label: 'Trung b√¨nh', description: 'S·ªë v·ª´a ph·∫£i' },
              { value: 'hard', label: 'Kh√≥', description: 'S·ªë l·ªõn, ph√©p t√≠nh ph·ª©c t·∫°p' }
            ].map(({ value, label, description }) => (
              <label key={value} className="flex items-center p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                <input
                  type="radio"
                  name="difficulty"
                  value={value}
                  checked={difficulty === value}
                  onChange={(e) => setDifficulty(e.target.value)}
                  className="mr-3 h-4 w-4 text-blue-600"
                />
                <div>
                  <div className="font-medium text-gray-800">{label}</div>
                  <div className="text-sm text-gray-500">{description}</div>
                </div>
              </label>
            ))}
          </div>
        </div>

        {/* Start Button */}
        <button
          onClick={handleStart}
          className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-4 px-6 rounded-xl text-lg transition-colors duration-200"
        >
          üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra
        </button>
      </div>
    </div>
  );
};
